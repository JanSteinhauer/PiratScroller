[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://Assets/models/Island größer.png" type="Texture" id=1]
[ext_resource path="res://Assets/models/Island größer shader.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 250.0 ]
operator = 2

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// ScalarOp:4
	float n_in4p1 = 250.00000;
	float n_out4p0 = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)) * n_in4p1;

// Output:0
	ALBEDO = n_out2p0;
	EMISSION = vec3(n_out4p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -443.038, 64.2114 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -140, 120 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -200, 380 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( 100, 320 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 0, 0, 4, 0, 0, 5 )

[resource]
shader = SubResource( 6 )
